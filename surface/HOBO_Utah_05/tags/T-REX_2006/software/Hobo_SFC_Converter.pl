#! /usr/bin/perl -w

package Hobo_SFC_Converter;

##Module-------------------------------------------------------------------
# <p>The Hobo_SFC_Converter is a script for converting the Univisity of Utah
# Hobo 5 minute temperature data from its source ASCII format to the QCF format.</p>
#
# @author Joel Clawson
# @version TREX_2006 This conversion was originally developed for T-REX.
##Module-------------------------------------------------------------------
use strict;
if (-e "/work") {
    use lib "/work/software/TREX/library/conversion_modules/Version6";
} elsif (-e "/net/work") {
    use lib "/net/work/software/TREX/library/conversion_modules/Version6";
} else {
    die("Cannot find conversion module library directory.\n");
}
use DpgCalculations;
use DpgDate;
use RecordMap;
use Station::ElevatedStationMap;
use Station::Station;
use Surface::QCFConstants qw(:DEFAULT);
use Surface::QCFSurfaceRecord;

$! = 1;

&main();

##-------------------------------------------------------------------------
# @signature void main()
# <p>Execute the script to run the conversion.</p>
##-------------------------------------------------------------------------
sub main {
    my $converter = Hobo_SFC_Converter->new();
    $converter->convert();
    $converter->clean_empty_files();
}

##-------------------------------------------------------------------------
# @signature Hobo_SFC_Converter new()
# <p>Create a new instance of the Hobo_Converter class.  This defines
# the class and the constants used by the conversion.</p>
##-------------------------------------------------------------------------
sub new {
    my $invocant = shift;
    my $class = $invocant || ref($invocant);
    my $self = {};
    bless($self,$class);

    $self->{"stations"} = Station::ElevatedStationMap->new();
    $self->{"records"} = RecordMap->new();
    
    $self->{"NETWORK"} = "Utah_HOBO5";
    $self->{"PROJECT"} = "T-REX";

    $self->{"START_TOI"} = "2006/03/01";
    $self->{"END_TOI"} = "2006/04/30";

    $self->{"OUT_DIR"} = "../output";
    $self->{"FINAL_DIR"} = "../final";
    $self->{"RAW_DIR"} = "../raw_data";

    $self->{"DUPES_FILE"} = sprintf("%s/dupes.log",$self->{"OUT_DIR"});
    $self->{"SEQUENCE_FILE"} = sprintf("%s/sequence.log",$self->{"OUT_DIR"});
    $self->{"STN_SUM_FILE"} = sprintf("%s/station_summary.log",$self->{"OUT_DIR"});
    $self->{"warning_file"} = sprintf("%s/warning.log",$self->{"OUT_DIR"});

    return $self;
}

##-------------------------------------------------------------------------
# @signature void check_for_duplicates()
# <p>Search the records generated by the conversion to see if duplicate
# records were found and print them to a duplicate log file.</p>
##-------------------------------------------------------------------------
sub check_for_duplicates {
    my ($self) = @_;
    
    open(my $DUPES,sprintf(">%s",$self->{"DUPES_FILE"})) or die("Can't create dupes file.\n");
    foreach my $dupe ($self->{"records"}->getDuplicateRecords()) {
        my $rec = $self->{"records"}->getRecord($dupe->getStationId(),$dupe->getNetworkId(),$dupe->getNominalDate(),$dupe->getNominalTime());

        if ($rec->toQCF_String(0) eq $dupe->toQCF_String(0)) {
            printf($DUPES "Exact duplicate found at %s in %s at %s %s.\n",$rec->getStationId(),$rec->getNetworkId(),$rec->getNominalDate(),$rec->getNominalTime());
        } else {
            printf($DUPES "Duplicate records found: %s %s at %s %s.  Keeping the first record.\n\t%s\t%s",$rec->getStationId(),$rec->getNetworkId(),$rec->getNominalDate(),$rec->getNominalTime(),$rec->toQCF_String(0),$dupe->toQCF_String(0));
        }
    }
    close($DUPES);
}

##-------------------------------------------------------------------------
# @signature void check_for_sequence_problems()
# <p>Check the records generated by the conversion to see if any of the
# expected records are missing.  The messages are placed into a sequence
# log file.</p>
##-------------------------------------------------------------------------
sub check_for_sequence_problems {
    my ($self) = @_;
    
    open (my $SEQ,sprintf(">%s",$self->{"SEQUENCE_FILE"})) or die("Can't create the sequence file.\n");
    print($SEQ $self->{"records"}->check5minuteSequence($self->{"START_TOI"},$self->{"END_TOI"}));
    close($SEQ);
}

##-------------------------------------------------------------------------
# @signature void clean_empty_files()
# <p>Remove all zero length log files and display a message to the user
# that the particular log was not generated.</p>
##-------------------------------------------------------------------------
sub clean_empty_files {
    my ($self) = @_;

    # Remove an empty warning file.
    if (-z $self->{"warning_file"}) {
	printf("There were not any warnings generated for the conversion.\n");
	unlink($self->{"warning_file"});
    }

    # Remove an empty duplicate record file.
    if (-z $self->{"DUPES_FILE"}) {
	printf("There were not any duplicate records found during the conversion.\n");
	unlink($self->{"DUPES_FILE"});
    }

    # Remove an empty sequence file.
    if (-z $self->{"SEQUENCE_FILE"}) {
	printf("There were not any missing records found during the conversion.\n");
	unlink($self->{"SEQUENCE_FILE"});
    }
}

##-------------------------------------------------------------------------
# @signature void convert()
# <p>Perform the conversion of the raw data to the QCF format.  This will
# generate the necessary directories, QCF data files, station lists, and
# other log files.</p>
##-------------------------------------------------------------------------
sub convert {
    my ($self) = @_;

    mkdir($self->{"OUT_DIR"}) unless(-e $self->{"OUT_DIR"});
    mkdir($self->{"FINAL_DIR"}) unless(-e $self->{"FINAL_DIR"});

    open($self->{"WARN"},">".$self->{"warning_file"}) or die("Can't create warning file.\n");

    $self->read_raw_files();
    $self->generate_output_files();
    $self->generate_station_files();

    close($self->{"WARN"});
}

##-------------------------------------------------------------------------
# @signature String clean_for_file_name(String text)
# <p>Remove/translate characters in a String so it can be used in a file name.</p>
# 
# @input $text The String to be cleaned.
# @output $text The cleaned up String.
##-------------------------------------------------------------------------
sub clean_for_file_name {
    my ($self,$text) = @_;
    
    # Convert spaces to underscores.
    $text =~ s/\s+/_/g;

    # Remove all hyphens
    $text =~ s/\-//g;

    return $text;
}

sub find_station {
    my ($self,$station_id,$lat,$lon,$elev) = @_;

    my $station = $self->{"stations"}->getStation($station_id,$self->{"NETWORK"},$lat,$lon,$elev);
    if (!defined($station)) {
        $station = Station::Station->new($station_id,$self->{"NETWORK"});
        $station->setStationName(sprintf("U of Utah Hobo Station %s",$station_id));
        $station->setLatitude($lat,format_location($lat));
        $station->setLongitude($lon,format_location($lon));
        $station->setElevation($elev,"m");

        $station->setLatLongAccuracy(3);
        $station->setStateCode("CA");
        $station->setReportingFrequency("5 minute");
        $station->setPlatformIdNumber(352);
        $station->setNetworkIdNumber(99);

        $self->{"stations"}->addStation($station);
    }
    
    return $station;
}

sub format_location {
    my ($value) = @_;

    my $format = $value < 0 ? "-" : "";
    while (length($format) < length($value)) { $format .= "D"; }

    return $format;
}

##-------------------------------------------------------------------------
# @signature void generate_output_files()
# <p>Generate the output files including the data file, duplicate record
# file, sequence problem file, and warning file.</p>
##-------------------------------------------------------------------------
sub generate_output_files {
    my ($self) = @_;

    printf("Generating output files...\n");

    # Check for problems with the records in the record map.
    $self->check_for_duplicates();
    $self->check_for_sequence_problems();

    # Generate the data file.
    my $outfile = sprintf("%s/%s.0qc",$self->{"OUT_DIR"},lc($self->clean_for_file_name($self->{"NETWORK"})));
    open(my $OUT,">$outfile") or die("Can't create output file: $outfile\n");
    foreach my $record ($self->{"records"}->getAllRecords()) {
        my $output = $record->toQCF_String();
        $output =~ s/ \-0\.00 /  0\.00 /g;
        print($OUT $output);
	    $self->{"stations"}->getStation($record->getStationId(),$self->{"NETWORK"},$record->getLatitude(),$record->getLongitude(),$record->getElevation())->insertDate($record->getNominalDate(),"YYYY/MM/DD") if ($output ne "");
    }
    close($outfile);
}

##-------------------------------------------------------------------------
# @signature void generate_station_files()
# <p>Create the station list and the station summary files.</p>
##-------------------------------------------------------------------------
sub generate_station_files {
    my ($self) = @_;

    my $station_file = sprintf("%s/%s_%s_surface_stationCD.out",$self->{"FINAL_DIR"},
			       $self->clean_for_file_name($self->{"NETWORK"}),
			       $self->clean_for_file_name($self->{"PROJECT"}));
    open(my $STN,">$station_file") or die("Can't create station file: $station_file\n");
    foreach my $station ($self->{"stations"}->getAllStations()) {
	print($STN $station->toString()) unless ($station->getBeginDate() =~ /^9+$/);
    }
    close($STN);

    open(my $SUM,">".$self->{"STN_SUM_FILE"}) or die("Can't create the station summary file.\n");
    print($SUM $self->{"stations"}->getStationSummary());
    close($SUM);
}

##-------------------------------------------------------------------------
# @signature int in_time_of_interest(Record record)
# <p>Determine if the current record is in the time of interest for the 
# current project.</p>
# 
# @input $record The record to be tested to be in the time of interest.
# @return $result <code>1</code> if the record is in the time of interest,
# <code>0</code> otherwise.
##-------------------------------------------------------------------------
sub in_time_of_interest {
    my ($self,$record) = @_;

    return compareDates($self->{"START_TOI"},"YYYY/MM/DD",$record->getNominalDate(),"YYYY/MM/DD") >= 0 && compareDates($record->getNominalDate(),"YYYY/MM/DD",$self->{"END_TOI"},"YYYY/MM/DD") >= 0;
}

sub parse_header {
    my ($self,$FILE) = @_;
    my ($station_id,$missing_value);

    while ((my $line = <$FILE>) !~ /^UTC\s+Deg\s+Deg\s+m\s+Deg_C/) {
        if ($line =~ /PLATFORM\/SITE=(.+)$/) {
            $station_id = trim($1);
        } elsif ($line =~ /MISSING OR BAD DATA\s*=\s*(.+)\;/) {
            $missing_value = trim($1);
        }
    }

    return ($station_id,$missing_value);
}

##-------------------------------------------------------------------------
# @signature void parse_raw_file(String file)
# <p>Process the file by parsing the raw data and converting it into the
# QCF format.</p>
#
# @input $file The full path to the file to be parsed.
##-------------------------------------------------------------------------
sub parse_raw_file {
    my ($self,$file) = @_;

    printf("Processing file: %s...\n",$file);

    open(my $FILE,$file) or die("Cannot open file $file to be read.\n");
    my $WARN = $self->{"WARN"};

    my ($station_id,$missing_value) = $self->parse_header($FILE); 

    while (my $line = <$FILE>) {
	# Prepare the data to be put into the QCF Record.
        chomp($line);
        my @data = split(' ',$line);

        my $station = $self->find_station($station_id,$data[1],-1 * $data[2],$data[3]);

	# Put the data values into the QCF Record.
        my $record = Surface::QCFSurfaceRecord->new($WARN,$station);
        $record->setReadingTime(substr($data[0],0,8),"YYYYMMDD",substr($data[0],8,4),"HHMM",0);

        if ($self->in_time_of_interest($record)) {
            $record->setTemperature($data[4],"C") unless ($data[4] eq $missing_value);

	    $self->update_for_TREX($record) if ($self->{"PROJECT"} =~ /T\-?REX/);

	    $self->{"records"}->addRecord($record);
	}
    }

    close($FILE);
}

##-------------------------------------------------------------------------
# @signature void read_raw_files()
# <p>Read in the list of raw data files in the raw data directory and 
# parse them into the QCF format.</p>
##-------------------------------------------------------------------------
sub read_raw_files {
    my ($self) = @_;
    
    opendir(my $RAWDIR,$self->{"RAW_DIR"}) or die("Unable to read raw directory: ".
						  $self->{"RAW_DIR"}."\n");
    my @files = sort(grep(/\.txt$/,readdir($RAWDIR)));
    closedir($RAWDIR);

    my $count = 0;    
    foreach my $file (@files) {
        $count++;
	$self->parse_raw_file(sprintf("%s/%s",$self->{"RAW_DIR"},$file));
        #last if ($count >= 1);
    }
}

##-------------------------------------------------------------------------
# @signature String trim(String line)
# <p>Remove all leading and trailing whitespace from the specified line.</p>
# @input $line The line to be trimmed.
# @output $line The trimmed line.
##-------------------------------------------------------------------------
sub trim {
    my ($line) = @_;

    return $line if (!defined($line));

    $line =~ s/^\s+//;
    $line =~ s/\s+$//;
    
    return $line;
}

##-------------------------------------------------------------------------
# @signature void update_for_TREX(QCFSurfaceRecord record)
# <p>Update the specified record for changes that only apply during the
# T-REX project.</p>
#
# @input $record The record to be updated.
##-------------------------------------------------------------------------
sub update_for_TREX {
    my ($self,$record) = @_;

    if ($record->getStationId() eq "E12") {
        $record->setTemperatureFlag($BAD_FLAG) if ($record->getTemperature() != $MISSING);
    }
}    
